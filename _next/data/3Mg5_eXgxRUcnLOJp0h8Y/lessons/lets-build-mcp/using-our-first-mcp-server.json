{"pageProps":{"post":{"attributes":{"title":"Using Our First MCP Server","description":"Brian Holt walks you through setting up and using an MCP server with Claude Desktop and Tome, including the JSON config snippet, how to point your client to mcp.js, and steps to verify the model uses the tool. This practical guide from Complete Intro to MCP covers model context protocol tools and AI tool integration for building powerful AI applications.","keywords":["MCP server setup","Model Context Protocol","Claude Desktop","Tome","AI tools","Brian Holt"]},"html":"<p>Now we have a valid MCP server, let&#39;s use it!</p>\n<p>I&#39;ll show you how for both Claude Desktop and Tome but just Google &quot;how do I use MCP server with <my MCP client>&quot; and it should point you to what you need.</p>\n<blockquote>\n<p>This is also subject to change. In particular I imagine Claude Desktop has to make this way easier to do. But this works as of writing.</p>\n</blockquote>\n<h2>Claude Desktop</h2>\n<p>Open settings on your Claude Desktop client and go the developers tab. You should see something that will edit your config. It will then probably just point you at the file you need to edit, so open that with VS Code or whatever. Put this in there:</p>\n<pre><code class=\"hljs language-json\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;mcpServers&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;demo-server&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">&quot;command&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;[the fully path to your node binary]&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;args&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;[the full path to your mcp.js file]&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">&quot;env&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-attr\">&quot;NODE_OPTIONS&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;--no-deprecation&quot;</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre><ul>\n<li>Type <code>which node</code> to get your node path. Mine is long and weird because I use <a href=\"https://github.com/Schniz/fnm\">fnm</a> to manage my Node.js installs. It might be less weird for you.</li>\n<li>In the directory where your mcp.js file is, type <code>pwd</code>. Copy that path and then put <code>/mcp.js</code> on the end for the args.</li>\n<li><code>--no-deprecation</code> just makes for less noisy logs, particularly if you have dependencies. I think it can confuse Claude too. I see it in every example so I just put it in.</li>\n</ul>\n<p>Okay, now restart Claude Desktop (you have to restart it every time you edit the config) and you should now be able to use our MCP server.</p>\n<h2>Tome</h2>\n<p>Tome is much simpler. You just click the MCP logo on the left side and add your command to run your server. You shouldn&#39;t need to full Node.js path but you do need the full path to mcp.js. So it&#39;ll look like</p>\n<pre><code class=\"hljs language-bash\"><button class=\"copy-btn\">Copy</button>node /my/path/to/my/server/mcp.js\n</code></pre><p>Or something like that. I don&#39;t believe you need to restart Tome, it should just start working.</p>\n<p>Let&#39;s try it. In either one, run this prompt</p>\n<pre><code><button class=\"copy-btn\">Copy</button>Using the `add-server` MCP server, use the add tool to add 15 and 21 together.\n</code></pre><p>Why so specific? With such a simple use case, many models will just do it themselves and skip calling tools. This ensures that the model will know you want it to use the MCP server. I just ran <code>add 21 and 15</code> in both Tome with qwen3:8b and Claude Sonnet 4 and both <em>did</em> choose to use the tool, but that&#39;s not always true. In any case, you should see some UI that indicates that a tool was used. If you don&#39;t see any UI indicating that then the model elected to not use the tool.</p>\n<p>And there you go! That&#39;s how you make and consume an MCP server.</p>\n","markdown":"\nNow we have a valid MCP server, let's use it!\n\nI'll show you how for both Claude Desktop and Tome but just Google \"how do I use MCP server with <my MCP client>\" and it should point you to what you need.\n\n> This is also subject to change. In particular I imagine Claude Desktop has to make this way easier to do. But this works as of writing.\n\n## Claude Desktop\n\nOpen settings on your Claude Desktop client and go the developers tab. You should see something that will edit your config. It will then probably just point you at the file you need to edit, so open that with VS Code or whatever. Put this in there:\n\n```json\n{\n  \"mcpServers\": {\n    \"demo-server\": {\n      \"command\": \"[the fully path to your node binary]\",\n      \"args\": [\"[the full path to your mcp.js file]\"],\n      \"env\": {\n        \"NODE_OPTIONS\": \"--no-deprecation\"\n      }\n    }\n  }\n}\n```\n\n- Type `which node` to get your node path. Mine is long and weird because I use [fnm][fnm] to manage my Node.js installs. It might be less weird for you.\n- In the directory where your mcp.js file is, type `pwd`. Copy that path and then put `/mcp.js` on the end for the args.\n- `--no-deprecation` just makes for less noisy logs, particularly if you have dependencies. I think it can confuse Claude too. I see it in every example so I just put it in.\n\nOkay, now restart Claude Desktop (you have to restart it every time you edit the config) and you should now be able to use our MCP server.\n\n## Tome\n\nTome is much simpler. You just click the MCP logo on the left side and add your command to run your server. You shouldn't need to full Node.js path but you do need the full path to mcp.js. So it'll look like\n\n```bash\nnode /my/path/to/my/server/mcp.js\n```\n\nOr something like that. I don't believe you need to restart Tome, it should just start working.\n\nLet's try it. In either one, run this prompt\n\n```\nUsing the `add-server` MCP server, use the add tool to add 15 and 21 together.\n```\n\nWhy so specific? With such a simple use case, many models will just do it themselves and skip calling tools. This ensures that the model will know you want it to use the MCP server. I just ran `add 21 and 15` in both Tome with qwen3:8b and Claude Sonnet 4 and both _did_ choose to use the tool, but that's not always true. In any case, you should see some UI that indicates that a tool was used. If you don't see any UI indicating that then the model elected to not use the tool.\n\nAnd there you go! That's how you make and consume an MCP server.\n\n[fnm]: https://github.com/Schniz/fnm\n","slug":"using-our-first-mcp-server","title":"Using Our First MCP Server","section":"Let's Build an MCP Server","icon":"file-code","filePath":"/home/runner/work/complete-intro-to-mcp/complete-intro-to-mcp/lessons/04-lets-build-mcp/B-using-our-first-mcp-server.md","nextSlug":"/lessons/lets-build-mcp/making-a-weather-mcp-server","prevSlug":"/lessons/lets-build-mcp/my-first-mcp-server"}},"__N_SSG":true}
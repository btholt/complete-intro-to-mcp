order,sectionTitle,lessonTitle,slug,sectionIcon,filePath,description
01A,Welcome,Intro,welcome/intro,info-circle,/lessons/welcome/intro,"Learn how MCP (Model Context Protocol) augments AI tools to perform tasks by building MCP servers and integrating with APIs, as Brian Holt guides beginners in Complete Intro to MCP for Frontend Masters. This JavaScript/Node.js course covers creating reliable AI agents and toolchains with model-context workflows, with hands-on projects and a GitHub repo for practice."
01B,Welcome,My Setup,welcome/my-setup,info-circle,/lessons/welcome/my-setup,"Part of Brian Holt's Complete Intro to MCP course, this section covers Node.js setup (recommended v22.18+ and using fnm) with notes on Bun compatibility, plus a Tools FAQ detailing the preferred development stack: VS Code with specific themes and extensions, Cursor for code generation, Firefox, and a streamlined Terminal setup (zsh, Dracula theme, Starship prompt, Nerd Font)."
02A,AI,Thoughts on AI and Software Dev,ai/thoughts-on-ai,robot,/lessons/ai/thoughts-on-ai,"Brian Holt shares his view on how AI will reshape software development, arguing that developers should embrace AI tools and AI agents to stay ahead. He explains that the software industry isn’t shrinking, but the way we write code will evolve, with responsible, AI-assisted coding blending agent-generated and hand-written work. This perspective emphasizes practical adoption now, continual learning, and owning every line of code, AI-generated or not."
02B,AI,Agents,ai/agents,robot,/lessons/ai/agents,"Brian Holt clarifies what an 'agent' means in AI—it's a loosely defined term distinct from a plain LLM—and explains how agentic workflows use plan, generate, evaluate, and iterate to accomplish tasks, with coding IDE agents like Replit, v0, Create.xyz, Same.new, DataButton, and app.build as concrete examples. He invites hands-on experimentation with online coding agents, tying the discussion to the Complete Intro to MCP course and its focus on AI agents and the Model Context Protocol tools."
03A,Setup MCP Clients,Claude Desktop,setup-mcp-clients/claude-desktop,computer,/lessons/setup-mcp-clients/claude-desktop,"Brian Holt's Complete Intro to MCP guide focuses on two MCP clients—Claude Desktop and Tome—and shows how to download Claude Desktop, log in (free tier sufficient), and connect your MCP servers via the 'Connect your tools to Claude' panel for local tool integration."
03B,Setup MCP Clients,Tome and Ollama,setup-mcp-clients/tome-and-ollama,computer,/lessons/setup-mcp-clients/tome-and-ollama,"Brian Holt explains practical options for running tool-enabled LLMs within the MCP framework, including Tome (an open-source chat app supporting OpenAI and Google Gemini) and Ollama for local model hosting, with guidance on selecting tool-capable models and managing GPU/CPU inference costs. It also highlights OpenRouter and the Tome Discord community for easy model switching within MCP."
03C,Setup MCP Clients,Other Clients,setup-mcp-clients/other-clients,computer,/lessons/setup-mcp-clients/other-clients,"Brian Holt explains that MCP shines beyond basic clients, highlighting coding-focused options like Cursor, Windsurf, VS Code, and Claude Code. To ease the introduction, the discussion centers on chat-oriented MCP clients for now, with plans to explore Cursor later."
04A,Let's Build an MCP Server,My First MCP Server,lets-build-mcp/my-first-mcp-server,file-code,/lessons/lets-build-mcp/my-first-mcp-server,"Brian Holt guides you through building a local MCP server (Model Context Protocol) using stdio transport, registering an addition tool with Zod validation, and testing via CLI with JSON RPC 2.0. This hands-on example uses the @modelcontextprotocol/sdk in Node.js to show how MCP servers communicate over standard input/output, laying the groundwork for future SSE-based transports and AI tool integration."
04B,Let's Build an MCP Server,Using Our First MCP Server,lets-build-mcp/using-our-first-mcp-server,file-code,/lessons/lets-build-mcp/using-our-first-mcp-server,"Brian Holt walks you through setting up and using an MCP server with Claude Desktop and Tome, including the JSON config snippet, how to point your client to mcp.js, and steps to verify the model uses the tool. This practical guide from Complete Intro to MCP covers model context protocol tools and AI tool integration for building powerful AI applications."
04C,Let's Build an MCP Server,Making a Weather MCP Server,lets-build-mcp/making-a-weather-mcp-server,file-code,/lessons/lets-build-mcp/making-a-weather-mcp-server,"Brian Holt guides you in building a practical MCP server that augments an LLM with live data by creating a weather tool with the Open-Meteo API. The example walks through the weather.js code to register a Get Current Weather tool, handle latitude/longitude inputs, fetch data, and return structured outputs for AI agents. A hands-on tutorial on the Model Context Protocol (MCP) for powering AI applications with real-time weather information."
04D,Let's Build an MCP Server,Resources,lets-build-mcp/resources,file-code,/lessons/lets-build-mcp/resources,"Brian Holt explains Resources in MCP, showing how they differ from tools by providing static, non-dynamic context to an LLM. The guide walks through creating an MCP server and a static resource (database-schema) with code, attaching it in Claude Desktop, and querying the LLM to explain the schema in plain English. It also covers resource templates, their limitations, and practical steps for using Resources in an MCP project like an issue tracker."
04E,Let's Build an MCP Server,Prompts,lets-build-mcp/prompts,file-code,/lessons/lets-build-mcp/prompts,"Brian Holt explains the difference between prompts and resources in the MCP framework and shows how to create and share prompt templates. The guide walks you through building an MCP server that uses an Airbnb/Idiomatic.js/Standard style guide to generate code-review feedback from an LLM, with steps to integrate Claude or Tome for real-time feedback."
04F,Let's Build an MCP Server,Future Features of MCP,lets-build-mcp/future-features-of-mcp,file-code,/lessons/lets-build-mcp/future-features-of-mcp,"Written by Brian Holt, this post surveys evolving MCP client features—Roots for selective file access, Sampling with a human in the loop for direct prompting, and Elicitation for follow-up questions—and explains how the Model Context Protocol enables safer, more capable AI tools. It notes these features are experimental and not yet supported by all clients, with expected support in Claude Desktop and Tome, and links to the MCP docs for details."
05A,Our Project,MCP Server Design,our-project/mcp-server-design,screwdriver-wrench,/lessons/our-project/mcp-server-design,"Brian Holt guides you through building a real MCP server for an issue tracker, including step-by-step setup (clone the app, install dependencies, create an MCP directory, and run the server) and a sample main.js that registers a database-schema resource. The tutorial emphasizes using MCP to orchestrate end-to-end tasks with Claude Desktop for conversational ticketing—addressing auth, operation order, and consistent tagging—so you can create tickets, assign users, and apply correct labels via AI."
05B,Our Project,Api Based Tools,our-project/api-based-tools,screwdriver-wrench,/lessons/our-project/api-based-tools,"Brian Holt's Complete Intro to MCP tutorial dives into the 'wrong way' of mapping each API call to an MCP tool within an issue-tracker app, then shows how to build reusable MCP tools like 'Create Issue' and 'List Tags' with clear input schemas and API-key handling. It includes practical code snippets, integration steps for Claude Desktop or other agents, and guidance on testing and scaling MCP workflows."
05C,Our Project,Jobs Based Tools,our-project/jobs-based-tools,screwdriver-wrench,/lessons/our-project/jobs-based-tools,"Brian Holt presents a practical, jobs-oriented MCP server from the Complete Intro to MCP course, illustrating how to implement three focused actions with the Model Context Protocol: create high-priority bugs, create low-priority feature requests, and update ticket status. The piece includes JavaScript code for a minimal MCP server and discusses reliability over flexibility using real-world tool selection inspired by Qwen3.6B experiments."
06A,SSEs and Streaming HTML,Server Side Events,sses-and-streaming-html/server-side-events,bars-staggered,/lessons/sses-and-streaming-html/server-side-events,"Brian Holt explains MCP transport options, contrasting the local stdio setup with remote MCP servers, why the SSE-based session model was short-lived and deprecated in favor of streamable HTTP, and how this shift enables a more resilient, resumable AI agent communication workflow."
06B,SSEs and Streaming HTML,Streamable HTTP,sses-and-streaming-html/streamable-http,bars-staggered,/lessons/sses-and-streaming-html/streamable-http,"Brian Holt walks you through building a Streamable HTTP MCP server in Node.js with Express, using a single /mcp endpoint and UUID-based sessions for client-server communication. The guide contrasts streamable HTTP with SSEs, demonstrates a concrete MCP setup (POST for client messages, GET for server messages, DELETE to end sessions), and covers scalability and security considerations plus inspector usage."
07A,Vibes,Let's Vibe Code,vibes/lets-vibe-code,hand-sparkles,/lessons/vibes/lets-vibe-code,"Brian Holt's Complete Intro to MCP teaches you how to supercharge an AI coding agent using the Model Context Protocol (MCP), with hands-on setup for Claude Code, Cursor, Windsurf, VS Code Copilot in agent mode, and Zed. The guide also covers MCP server workflows via GitHub, Neon for databases, Playwright, Context7, Figma, and Vercel, plus practical tips on safety, ORMs like Drizzle, and keeping docs up to date."
07B,Vibes,Security,vibes/security,hand-sparkles,/lessons/vibes/security,"Brian Holt emphasizes security as the top priority when using AI agents and MCP servers, urging you to vet and remove unreliable MCPs and to verify any that you employ. He introduces the Paperclip Golden Retriever as a cautionary reminder that agents will aggressively pursue prompts, so craft precise prompts and thoroughly validate outputs. This guidance helps you safely build AI tools with the Model Context Protocol and the MCP framework."
07C,Vibes,Wrap Up,vibes/wrap-up,hand-sparkles,/lessons/vibes/wrap-up,"Congrats on completing Complete Intro to MCP by Brian Holt. This wrap-up outlines practical next steps: build or open-source MCP servers for your apps, explore MCP client workflows and tools across IDEs, and experiment with new MCP servers and clients to unlock greater AI-agent productivity. Share your learnings on social to celebrate your growth."
